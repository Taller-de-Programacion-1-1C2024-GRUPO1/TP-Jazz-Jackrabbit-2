@startuml
class ClientDrawer {
    Queue<std::unique_ptr<Command>>& q_cmds;
    Queue<Snapshot>& q_snapshots;
    bool game_running;
    int client_id;
    int score;
    int lives;
    DrawableRabbit* client_rabbit;
    std::map<int, DrawableRabbit*> rabbits;
    std::map<int, DrawableEnemy*> enemies;
    std::map<int, DrawableProjectile*> projectiles;
    std::map<int, DrawableValuable*> valuables;
    std::map<int, DrawableAmmo*> ammo_drops;
    std::map<int, Drawable*> food;
    int rabbit_width;
    int rabbit_height;
    KeyboardHandler keyboard_handler;

    int run(int player_id, int map_texture);
    void showLoadingScreen(Renderer& renderer);
    void showFinalScreen(Renderer& renderer, const Snapshot& snapshot);
}

class TopScores {
    NumberImages numberImages;
    std::vector<std::pair<int, int>> current_snapshot_scores;

    void clearCurrentSnapshotScores();
    void addCurrentSnapshotScore(int player_id, int score);
    void update();
    void render();
}

class NumberImages {
    int x, y;
    SDL2pp::Renderer& renderer;
    SDL2pp::Texture numberTexture;
    std::vector<SDL2pp::Rect> numberRects;

    void renderNumber(int number, int offsetX, int offsetY, int size);
    void loadNumbers();
    void setCorner(int mode);
}

class FoodProvider {
    SDL2pp::Rect getFood(int id);
}

class Clock {
    int seconds = 0;
    int minutes = 0;
    NumberImages numberImages;

    void update(uint32_t current_time);
    void render();
}


class AmmoLeft {
    SDL2pp::Renderer& renderer;
    SDL2pp::Rect munitionRect;
    SDL2pp::Texture munitionTexture;
    int currentWeapon;
    int currentAmmo;
    NumberImages numberImages;

    void setWeapon(int weapon);
    void setAmmo(int ammo);
    void render();
}


class HeartsBanner {
    SDL2pp::Renderer& renderer;
    SDL2pp::Texture texture;
    SDL2pp::Rect heartRect;
    int livesCounter;

    void setCurrentLives(int livesCount);
    void render();
}

class MapLoader {
    Renderer& renderer;
    std::shared_ptr<SDL2pp::Texture> texture;

    std::vector<std::unique_ptr<Drawable>> loadMap(const DynamicMap& map,SDL2pp::Point& cameraPosition);
}





class KeyboardHandler {
    int client_id;
    Queue<std::unique_ptr<Command>>& q_cmds;

    void listenForCommands(bool& gameRunning);
    void setId(int id);
}


ClientDrawer --> TopScores
TopScores o-- NumberImages
Clock o-- NumberImages
AmmoLeft o-- NumberImages
ClientDrawer --> MapLoader 
ClientDrawer o-- KeyboardHandler 
ClientDrawer --> AmmoLeft
ClientDrawer --> HeartsBanner
ClientDrawer --> FoodProvider
ClientDrawer --> Clock
@enduml